{"ast":null,"code":"import { store } from '../../';\nimport * as ActionEvent from '../../static/actionsEvent';\nimport AuthenticationService from '../../service/AuthenticationService';\nexport var LOGIN_SUCESS = \"LOGIN_SUCESS\";\nexport var LOGIN_FAILED = \"LOGIN_FAILED\";\nexport var UpdatePassword = \"updatePassword\";\nexport var UpdateUserId = \"updateUserId\";\nexport var setLoginRedirectUrl = function setLoginRedirectUrl(toPath) {\n  return store.dispatch({\n    type: ActionEvent.Login_Redirect_Event,\n    toPath: toPath\n  });\n};\nexport var updatePassword = function updatePassword(password) {\n  return dispatch({\n    type: updatePassword,\n    payload: {\n      curPassword: password\n    }\n  });\n};\nexport var updateUserId = function updateUserId(UserId) {\n  return dispatch({\n    type: updateUserId,\n    payload: {\n      curUserId: UserId\n    }\n  });\n};\nexport var login = function login(userName, UserPass) {\n  return function (dispatch) {\n    AuthenticationService.executeJwtAuthenticationService(userName, UserPass).then(function (response) {\n      if (response.message === \"login\") {\n        dispatch({\n          type: LOGIN_SUCESS,\n          payload: {\n            loginName: \"login\",\n            isLogin: 1\n          }\n        });\n      } else {\n        dispatch({\n          type: LOGIN_FAILED,\n          payload: {\n            loginName: \"not login\",\n            isLogin: 0\n          }\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/src/redux/actions/loginActions.js"],"names":["store","ActionEvent","AuthenticationService","LOGIN_SUCESS","LOGIN_FAILED","UpdatePassword","UpdateUserId","setLoginRedirectUrl","toPath","dispatch","type","Login_Redirect_Event","updatePassword","password","payload","curPassword","updateUserId","UserId","curUserId","login","userName","UserPass","executeJwtAuthenticationService","then","response","message","loginName","isLogin"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,QAApB;AACA,OAAO,KAAKC,WAAZ,MAA6B,2BAA7B;AACA,OAAOC,qBAAP,MAAkC,qCAAlC;AAGA,OAAS,IAAMC,YAAY,GAAG,cAArB;AACT,OAAS,IAAMC,YAAY,GAAG,cAArB;AAET,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,MAAD,EAAY;AAC9C,SAAQR,KAAK,CAACS,QAAN,CAAe;AACnBC,IAAAA,IAAI,EAAET,WAAW,CAACU,oBADC;AAEpBH,IAAAA,MAAM,EAAEA;AAFY,GAAf,CAAR;AAIA,CALM;AAOP,OAAO,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAY;AAC1C,SAAOJ,QAAQ,CAAC;AACdC,IAAAA,IAAI,EAAEE,cADQ;AAEdE,IAAAA,OAAO,EAAE;AAACC,MAAAA,WAAW,EAACF;AAAb;AAFK,GAAD,CAAf;AAMC,CAPM;AASP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAU;AACpC,SAAOR,QAAQ,CAAC;AACdC,IAAAA,IAAI,EAAEM,YADQ;AAEdF,IAAAA,OAAO,EAAE;AAACI,MAAAA,SAAS,EAACD;AAAX;AAFK,GAAD,CAAf;AAIG,CALE;AAMP,OAAO,IAAME,KAAK,GAAG,SAARA,KAAQ,CAACC,QAAD,EAAUC,QAAV,EAAuB;AACxC,SAAO,UAAAZ,QAAQ,EAAI;AACjBP,IAAAA,qBAAqB,CAACoB,+BAAtB,CAAsDF,QAAtD,EAA+DC,QAA/D,EACCE,IADD,CACM,UAACC,QAAD,EACH;AACD,UAAIA,QAAQ,CAACC,OAAT,KAAmB,OAAvB,EAA+B;AAC7BhB,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEP,YADC;AAEPW,UAAAA,OAAO,EAAE;AAAEY,YAAAA,SAAS,EAAC,OAAZ;AAAoBC,YAAAA,OAAO,EAAC;AAA5B;AAFF,SAAD,CAAR;AAID,OALD,MAMI;AAEFlB,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEN,YADC;AAEPU,UAAAA,OAAO,EAAE;AAAEY,YAAAA,SAAS,EAAC,WAAZ;AAAwBC,YAAAA,OAAO,EAAC;AAAhC;AAFF,SAAD,CAAR;AAID;AAGF,KAlBD;AAsBD,GAvBD;AAwBD,CAzBI","sourcesContent":["import {store} from '../../';\nimport * as ActionEvent from '../../static/actionsEvent';\nimport AuthenticationService from '../../service/AuthenticationService'\n\n\nexport   const LOGIN_SUCESS = \"LOGIN_SUCESS\";\nexport   const LOGIN_FAILED = \"LOGIN_FAILED\";\n\nexport const UpdatePassword = \"updatePassword\";\nexport const UpdateUserId = \"updateUserId\";\n\nexport const setLoginRedirectUrl = (toPath) => {\n\treturn  store.dispatch({\n\t\t\t \ttype: ActionEvent.Login_Redirect_Event,\n\t\t\t\ttoPath: toPath\n\t\t\t })\n} \n\nexport const updatePassword = (password)=>{\nreturn dispatch({\n  type: updatePassword,\n  payload: {curPassword:password}\n\n})\n\n}\n\nexport const updateUserId = (UserId)=>{\n  return dispatch({\n    type: updateUserId,\n    payload: {curUserId:UserId}\n  \n  })}\nexport const login = (userName,UserPass) => {\n    return dispatch => {\n      AuthenticationService.executeJwtAuthenticationService(userName,UserPass)\n      .then((response\n      )=>{\n        if (response.message===\"login\"){\n          dispatch({\n            type: LOGIN_SUCESS,\n            payload: { loginName:\"login\",isLogin:1}\n          });\n        }\n        else{\n  \n          dispatch({\n            type: LOGIN_FAILED,\n            payload: { loginName:\"not login\",isLogin:0}\n          });\n        }\n        \n\n      })\n      \n     \n       \n    };\n  };\n\n"]},"metadata":{},"sourceType":"module"}
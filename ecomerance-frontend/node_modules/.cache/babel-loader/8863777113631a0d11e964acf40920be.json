{"ast":null,"code":"import axios from 'axios';\nimport AuthenticationService from '../service/AuthenticationService';\nimport { LOGIN_SUCESS, LOGIN_FAILED } from '../redux/actions/loginActions';\nimport * as actions from './apiGen';\nimport { push } from 'react-router-redux'; // 引入解析token方法\n\nimport jwt_decode from 'jwt-decode'; // 引入设置token方法\n\nimport setAuthToken from '../components/auth/setAuthToken';\n\nvar api = function api(_ref) {\n  var dispatch = _ref.dispatch;\n  return function (next) {\n    return function (action) {\n      if (action.type !== actions.loginBegan.type) {\n        return next(action);\n      }\n\n      console.log(actions.loginBegan.type);\n      var _action$payload = action.payload,\n          url = _action$payload.url,\n          method = _action$payload.method,\n          data = _action$payload.data,\n          onSucess = _action$payload.onSucess,\n          onError = _action$payload.onError;\n      console.log(action.payload);\n\n      try {\n        AuthenticationService.executeJwtAuthenticationService(url, method, data).then(function (response) {\n          console.log(response);\n\n          if (response.data.message === \"login\") {\n            var token = response.token.token;\n            localStorage.setItem('jwToken', token); //设置axios的headers token\n\n            setAuthToken(token); // 解析token\n\n            var decoded = jwt_decode(token);\n\n            if (onSucess) {\n              dispatch({\n                type: actions.loginSuccess.type,\n                payload: {\n                  loginName: \"login\",\n                  isLogin: 1\n                }\n              });\n            } else {\n              dispatch(actions.loginSuccess({\n                payload: {\n                  loginName: \"login\",\n                  isLogin: 1\n                }\n              }));\n            }\n          } else {\n            dispatch({\n              type: actions.loginFailed.type,\n              payload: {\n                loginName: \"not login\",\n                isLogin: 0\n              }\n            });\n          } //dispatch({ type: onSucess, payload: Response.data })\n\n        });\n      } catch (error) {\n        //genreal\n        dispatch(actions.loginFailed(error)); //\n\n        if (onError) {\n          dispatch({\n            type: onError,\n            payload: error\n          });\n        }\n      }\n    };\n  };\n};\n\nexport default api;","map":{"version":3,"sources":["/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/src/middleware/Api.js"],"names":["axios","AuthenticationService","LOGIN_SUCESS","LOGIN_FAILED","actions","push","jwt_decode","setAuthToken","api","dispatch","next","action","type","loginBegan","console","log","payload","url","method","data","onSucess","onError","executeJwtAuthenticationService","then","response","message","token","localStorage","setItem","decoded","loginSuccess","loginName","isLogin","loginFailed","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;AACA,SAAQC,YAAR,EAAqBC,YAArB,QAAwC,+BAAxC;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,SAASC,IAAT,QAAqB,oBAArB,C,CACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AACA,OAAOC,YAAP,MAAyB,iCAAzB;;AAIA,IAAMC,GAAG,GAAG,SAANA,GAAM;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SAAkB,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AAC5C,UAAIA,MAAM,CAACC,IAAP,KAAgBR,OAAO,CAACS,UAAR,CAAmBD,IAAvC,EAA8C;AAC1C,eAAOF,IAAI,CAACC,MAAD,CAAX;AACH;;AACDG,MAAAA,OAAO,CAACC,GAAR,CAAYX,OAAO,CAACS,UAAR,CAAmBD,IAA/B;AAJ4C,4BAKMD,MAAM,CAACK,OALb;AAAA,UAKpCC,GALoC,mBAKpCA,GALoC;AAAA,UAK/BC,MAL+B,mBAK/BA,MAL+B;AAAA,UAKvBC,IALuB,mBAKvBA,IALuB;AAAA,UAKhBC,QALgB,mBAKhBA,QALgB;AAAA,UAKNC,OALM,mBAKNA,OALM;AAM5CP,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,OAAnB;;AACA,UAAI;AACAf,QAAAA,qBAAqB,CAACqB,+BAAtB,CAAsDL,GAAtD,EAA0DC,MAA1D,EAAiEC,IAAjE,EACCI,IADD,CACM,UAACC,QAAD,EAEH;AACCV,UAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;;AAGF,cAAIA,QAAQ,CAACL,IAAT,CAAcM,OAAd,KAAwB,OAA5B,EAAoC;AAAA,gBAE3BC,KAF2B,GAEjBF,QAAQ,CAACE,KAFQ,CAE3BA,KAF2B;AAGlCC,YAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAA+BF,KAA/B,EAHkC,CAIlC;;AACAnB,YAAAA,YAAY,CAACmB,KAAD,CAAZ,CALkC,CAMlC;;AACA,gBAAMG,OAAO,GAAGvB,UAAU,CAACoB,KAAD,CAA1B;;AACE,gBAAGN,QAAH,EAAY;AACVX,cAAAA,QAAQ,CAAC;AACLG,gBAAAA,IAAI,EAAER,OAAO,CAAC0B,YAAR,CAAqBlB,IADtB;AAELI,gBAAAA,OAAO,EAAE;AAAEe,kBAAAA,SAAS,EAAC,OAAZ;AAAoBC,kBAAAA,OAAO,EAAC;AAA5B;AAFJ,eAAD,CAAR;AAID,aALD,MAMI;AACFvB,cAAAA,QAAQ,CAACL,OAAO,CAAC0B,YAAR,CAAqB;AAACd,gBAAAA,OAAO,EAAE;AAAEe,kBAAAA,SAAS,EAAC,OAAZ;AAAoBC,kBAAAA,OAAO,EAAC;AAA5B;AAAV,eAArB,CAAD,CAAR;AACD;AAEJ,WAlBD,MAmBI;AAEFvB,YAAAA,QAAQ,CAAC;AACPG,cAAAA,IAAI,EAAER,OAAO,CAAC6B,WAAR,CAAoBrB,IADnB;AAEPI,cAAAA,OAAO,EAAE;AAAEe,gBAAAA,SAAS,EAAC,WAAZ;AAAwBC,gBAAAA,OAAO,EAAC;AAAhC;AAFF,aAAD,CAAR;AAID,WA7BA,CA8BH;;AACH,SAlCG;AAmCH,OApCD,CAqCA,OAAOE,KAAP,EAAc;AACV;AACAzB,QAAAA,QAAQ,CAACL,OAAO,CAAC6B,WAAR,CAAoBC,KAApB,CAAD,CAAR,CAFU,CAIV;;AACA,YAAGb,OAAH,EAAW;AAACZ,UAAAA,QAAQ,CAAC;AAAEG,YAAAA,IAAI,EAAES,OAAR;AAAiBL,YAAAA,OAAO,EAAEkB;AAA1B,WAAD,CAAR;AAA4C;AAG3D;AAEJ,KAtDiC;AAAA,GAAtB;AAAA,CAAZ;;AA2DA,eAAe1B,GAAf","sourcesContent":["import axios from 'axios';\nimport AuthenticationService from '../service/AuthenticationService'\nimport {LOGIN_SUCESS,LOGIN_FAILED} from '../redux/actions/loginActions'\nimport * as actions from './apiGen';\nimport { push } from 'react-router-redux'\n// 引入解析token方法\nimport jwt_decode from 'jwt-decode'\n// 引入设置token方法\nimport setAuthToken from '../components/auth/setAuthToken'\n\n\n\nconst api = ({ dispatch }) => next => action => {\n    if (action.type !== actions.loginBegan.type ) {\n        return next(action);\n    }\n    console.log(actions.loginBegan.type);\n    const { url, method, data , onSucess, onError } = action.payload;\n    console.log(action.payload);\n    try {\n        AuthenticationService.executeJwtAuthenticationService(url,method,data)\n        .then((response\n\n        )=>{\n            console.log(response);\n\n            \n          if (response.data.message===\"login\"){\n            \n            const {token } = response.token;\n            localStorage.setItem('jwToken',token)\n            //设置axios的headers token\n            setAuthToken(token)\n            // 解析token\n            const decoded = jwt_decode(token)\n              if(onSucess){\n                dispatch({\n                    type: actions.loginSuccess.type,\n                    payload: { loginName:\"login\",isLogin:1}\n                  });\n              }\n              else{\n                dispatch(actions.loginSuccess({payload: { loginName:\"login\",isLogin:1}}))\n              }\n            \n          }\n          else{\n    \n            dispatch({\n              type: actions.loginFailed.type,\n              payload: { loginName:\"not login\",isLogin:0}\n            });\n          }\n        //dispatch({ type: onSucess, payload: Response.data })\n    })\n    }\n    catch (error) {\n        //genreal\n        dispatch(actions.loginFailed(error))\n\n        //\n        if(onError){dispatch({ type: onError, payload: error })}\n        \n\n    }\n\n}\n\n\n\n    ;\nexport default api;"]},"metadata":{},"sourceType":"module"}
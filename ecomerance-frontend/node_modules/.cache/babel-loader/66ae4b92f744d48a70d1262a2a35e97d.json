{"ast":null,"code":"import axios from 'axios';\nimport AuthenticationService from '../service/AuthenticationService';\nimport { LOGIN_SUCESS, LOGIN_FAILED } from '../redux/actions/loginActions';\n\nvar api = function api(_ref) {\n  var dispatch = _ref.dispatch;\n  return function (next) {\n    return function (action) {\n      if (action.type !== 'apiCallBegan') {\n        return next(action);\n      }\n\n      console.log(\"apiCallBegan\");\n      var _action$payload = action.payload,\n          url = _action$payload.url,\n          method = _action$payload.method,\n          data = _action$payload.data,\n          onSucess = _action$payload.onSucess,\n          onError = _action$payload.onError;\n      console.log(action.payload);\n\n      try {\n        AuthenticationService.executeJwtAuthenticationService(url, method, data).then(function (response) {\n          console.log(response);\n\n          if (response.data.message === \"login\") {\n            dispatch({\n              type: LOGIN_SUCESS,\n              payload: {\n                loginName: \"login\",\n                isLogin: 1\n              }\n            });\n          } else {\n            dispatch({\n              type: LOGIN_FAILED,\n              payload: {\n                loginName: \"not login\",\n                isLogin: 0\n              }\n            });\n          } //dispatch({ type: onSucess, payload: Response.data })\n\n        });\n      } catch (error) {\n        dispatch({\n          type: onError,\n          payload: error\n        });\n      }\n    };\n  };\n};\n\nexport default api;","map":{"version":3,"sources":["/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/src/middleware/Api.js"],"names":["axios","AuthenticationService","LOGIN_SUCESS","LOGIN_FAILED","api","dispatch","next","action","type","console","log","payload","url","method","data","onSucess","onError","executeJwtAuthenticationService","then","response","message","loginName","isLogin","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;AACA,SAAQC,YAAR,EAAqBC,YAArB,QAAwC,+BAAxC;;AAGA,IAAMC,GAAG,GAAG,SAANA,GAAM;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SAAkB,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AAC5C,UAAIA,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC;AAChC,eAAOF,IAAI,CAACC,MAAD,CAAX;AACH;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAJ4C,4BAKKH,MAAM,CAACI,OALZ;AAAA,UAKpCC,GALoC,mBAKpCA,GALoC;AAAA,UAK/BC,MAL+B,mBAK/BA,MAL+B;AAAA,UAKvBC,IALuB,mBAKvBA,IALuB;AAAA,UAKjBC,QALiB,mBAKjBA,QALiB;AAAA,UAKPC,OALO,mBAKPA,OALO;AAM5CP,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;;AACA,UAAI;AACAV,QAAAA,qBAAqB,CAACgB,+BAAtB,CAAsDL,GAAtD,EAA0DC,MAA1D,EAAiEC,IAAjE,EACCI,IADD,CACM,UAACC,QAAD,EAEH;AACCV,UAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;;AACF,cAAIA,QAAQ,CAACL,IAAT,CAAcM,OAAd,KAAwB,OAA5B,EAAoC;AAClCf,YAAAA,QAAQ,CAAC;AACPG,cAAAA,IAAI,EAAEN,YADC;AAEPS,cAAAA,OAAO,EAAE;AAAEU,gBAAAA,SAAS,EAAC,OAAZ;AAAoBC,gBAAAA,OAAO,EAAC;AAA5B;AAFF,aAAD,CAAR;AAID,WALD,MAMI;AAEFjB,YAAAA,QAAQ,CAAC;AACPG,cAAAA,IAAI,EAAEL,YADC;AAEPQ,cAAAA,OAAO,EAAE;AAAEU,gBAAAA,SAAS,EAAC,WAAZ;AAAwBC,gBAAAA,OAAO,EAAC;AAAhC;AAFF,aAAD,CAAR;AAID,WAdA,CAeH;;AACH,SAnBG;AAoBH,OArBD,CAsBA,OAAOC,KAAP,EAAc;AACVlB,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAEQ,OAAR;AAAiBL,UAAAA,OAAO,EAAEY;AAA1B,SAAD,CAAR;AAEH;AAEJ,KAlCiC;AAAA,GAAtB;AAAA,CAAZ;;AAuCA,eAAenB,GAAf","sourcesContent":["import axios from 'axios';\nimport AuthenticationService from '../service/AuthenticationService'\nimport {LOGIN_SUCESS,LOGIN_FAILED} from '../redux/actions/loginActions'\n\n\nconst api = ({ dispatch }) => next => action => {\n    if (action.type !== 'apiCallBegan') {\n        return next(action);\n    }\n    console.log(\"apiCallBegan\");\n    const { url, method, data, onSucess, onError } = action.payload;\n    console.log(action.payload);\n    try {\n        AuthenticationService.executeJwtAuthenticationService(url,method,data)\n        .then((response\n\n        )=>{\n            console.log(response);\n          if (response.data.message===\"login\"){\n            dispatch({\n              type: LOGIN_SUCESS,\n              payload: { loginName:\"login\",isLogin:1}\n            });\n          }\n          else{\n    \n            dispatch({\n              type: LOGIN_FAILED,\n              payload: { loginName:\"not login\",isLogin:0}\n            });\n          }\n        //dispatch({ type: onSucess, payload: Response.data })\n    })\n    }\n    catch (error) {\n        dispatch({ type: onError, payload: error })\n\n    }\n\n}\n\n\n\n    ;\nexport default api;"]},"metadata":{},"sourceType":"module"}
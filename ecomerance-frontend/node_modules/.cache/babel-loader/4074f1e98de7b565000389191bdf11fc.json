{"ast":null,"code":"import _classCallCheck from \"/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nvar API_URL = 'http://192.168.0.16:8081';\nexport var USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nvar AuthenticationService = /*#__PURE__*/function () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n  }\n\n  _createClass(AuthenticationService, [{\n    key: \"executeBasicAuthenticationService\",\n    value: function executeBasicAuthenticationService(username, password) {\n      return axios.get(\"\".concat(API_URL, \"/basicauth\"), {\n        headers: {\n          authorization: this.createBasicAuthToken(username, password)\n        }\n      });\n    }\n  }, {\n    key: \"executeJwtAuthenticationService\",\n    value: function executeJwtAuthenticationService(url, method, data) {\n      console.log(data);\n      return axios.post(\"\".concat(API_URL).concat(url), {\n        \"username\": data.username,\n        \"password\": data.password\n      });\n    }\n  }, {\n    key: \"validateToekn\",\n    value: function validateToekn() {\n      axios.defaults.headers.common['Authorization'] = localStorage.getItem(\"jwToken\");\n      console.log(localStorage.getItem(\"jwToken\"));\n      return axios.post(\"\".concat(API_URL, \"/validate\"));\n    }\n  }, {\n    key: \"createBasicAuthToken\",\n    value: function createBasicAuthToken(username, password) {\n      return 'Basic ' + window.btoa(username + \":\" + password);\n    }\n  }, {\n    key: \"registerSuccessfulLogin\",\n    value: function registerSuccessfulLogin(username, password) {\n      //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n      //console.log('registerSuccessfulLogin')\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n      this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n    }\n  }, {\n    key: \"registerSuccessfulLoginForJwt\",\n    value: function registerSuccessfulLoginForJwt(username, token) {\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n      this.setupAxiosInterceptors(this.createJWTToken(token));\n    }\n  }, {\n    key: \"createJWTToken\",\n    value: function createJWTToken(token) {\n      return 'Bearer ' + token;\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n  }, {\n    key: \"isUserLoggedIn\",\n    value: function isUserLoggedIn() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return false;\n      return true;\n    }\n  }, {\n    key: \"getLoggedInUserName\",\n    value: function getLoggedInUserName() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return '';\n      return user;\n    }\n  }, {\n    key: \"setupAxiosInterceptors\",\n    value: function setupAxiosInterceptors(token) {\n      var _this = this;\n\n      axios.interceptors.request.use(function (config) {\n        if (_this.isUserLoggedIn()) {\n          config.headers.authorization = token;\n        }\n\n        return config;\n      });\n    }\n  }]);\n\n  return AuthenticationService;\n}();\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/src/service/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","url","method","data","console","log","post","defaults","common","localStorage","getItem","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","token","createJWTToken","removeItem","user","interceptors","request","use","config","isUserLoggedIn"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAG,0BAAhB;AAEA,OAAO,IAAMC,gCAAgC,GAAG,mBAAzC;;IAEDC,qB;;;;;;;sDAEgCC,Q,EAAUC,Q,EAAU;AAClD,aAAOL,KAAK,CAACM,GAAN,WAAaL,OAAb,iBACH;AAAEM,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,OADG,CAAP;AAEH;;;oDAE+BK,G,EAAIC,M,EAAOC,I,EAAM;AAC7CC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,aAAOZ,KAAK,CAACe,IAAN,WAAcd,OAAd,SAAwBS,GAAxB,GAA+B;AAClC,oBAAWE,IAAI,CAACR,QADkB;AAElC,oBAAWQ,IAAI,CAACP;AAFkB,OAA/B,CAAP;AAIH;;;oCAEc;AACXL,MAAAA,KAAK,CAACgB,QAAN,CAAeT,OAAf,CAAuBU,MAAvB,CAA8B,eAA9B,IAAiDC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAjD;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAYI,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAZ;AACA,aAAOnB,KAAK,CAACe,IAAN,WAAcd,OAAd,eAAP;AAGH;;;yCAEoBG,Q,EAAUC,Q,EAAU;AACrC,aAAO,WAAWe,MAAM,CAACC,IAAP,CAAYjB,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;;4CAEuBD,Q,EAAUC,Q,EAAU;AACxC;AACA;AACAiB,MAAAA,cAAc,CAACC,OAAf,CAAuBrB,gCAAvB,EAAyDE,QAAzD;AACA,WAAKoB,sBAAL,CAA4B,KAAKf,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;;kDAE6BD,Q,EAAUqB,K,EAAO;AAC3CH,MAAAA,cAAc,CAACC,OAAf,CAAuBrB,gCAAvB,EAAyDE,QAAzD;AACA,WAAKoB,sBAAL,CAA4B,KAAKE,cAAL,CAAoBD,KAApB,CAA5B;AACH;;;mCAEcA,K,EAAO;AAClB,aAAO,YAAYA,KAAnB;AACH;;;6BAGQ;AACLH,MAAAA,cAAc,CAACK,UAAf,CAA0BzB,gCAA1B;AACH;;;qCAEgB;AACb,UAAI0B,IAAI,GAAGN,cAAc,CAACH,OAAf,CAAuBjB,gCAAvB,CAAX;AACA,UAAI0B,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,aAAO,IAAP;AACH;;;0CAEqB;AAClB,UAAIA,IAAI,GAAGN,cAAc,CAACH,OAAf,CAAuBjB,gCAAvB,CAAX;AACA,UAAI0B,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,aAAOA,IAAP;AACH;;;2CAEsBH,K,EAAO;AAAA;;AAC1BzB,MAAAA,KAAK,CAAC6B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAACC,MAAD,EAAY;AACR,YAAI,KAAI,CAACC,cAAL,EAAJ,EAA2B;AACvBD,UAAAA,MAAM,CAACzB,OAAP,CAAeC,aAAf,GAA+BiB,KAA/B;AACH;;AACD,eAAOO,MAAP;AACH,OANL;AAQH;;;;;;AAGL,eAAe,IAAI7B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'http://192.168.0.16:8081'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    executeJwtAuthenticationService(url,method,data) {\n        console.log(data);\n        return axios.post(`${API_URL}${url}`, {\n            \"username\":data.username,\n            \"password\":data.password\n        })\n    }\n\n    validateToekn(){\n        axios.defaults.headers.common['Authorization'] = localStorage.getItem(\"jwToken\");\n        console.log(localStorage.getItem(\"jwToken\"))\n        return axios.post(`${API_URL}/validate`\n        )\n\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}
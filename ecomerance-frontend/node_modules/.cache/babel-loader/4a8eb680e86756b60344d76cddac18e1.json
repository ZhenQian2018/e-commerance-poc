{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AuthenticationService from '../../../service/AuthenticationService';\nimport * as acitons2 from '../../../middleware/apiGen'; // 引入解析token方法\n\nimport jwt_decode from 'jwt-decode'; // 引入设置token方法\n\nimport setAuthToken from '../../../components/auth/setAuthToken';\nexport var authenticateUser = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(username, pass) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"login began\");\n            return _context.abrupt(\"return\", function (dispatch, getState) {\n              dispatch(acitons2.loginBegan);\n              AuthenticationService.executeJwtAuthenticationService(username, pass).then(function (response) {\n                console.log(response);\n\n                if (response.data.message === \"login\") {\n                  var token = response.data.token;\n                  console.log(token);\n                  localStorage.setItem('jwToken', token); //设置axios的headers token\n\n                  setAuthToken(token); // 解析token\n\n                  var decoded = jwt_decode(token);\n                  dispatch(acitons2.loginSuccess({\n                    loginName: \"login\",\n                    isLogin: 1\n                  }));\n                } else {\n                  dispatch(acitons2.loginSuccess({\n                    loginName: \"not login\",\n                    isLogin: 0\n                  }));\n                }\n              }).catch(function (error) {\n                dispatch(acitons2.loginSuccess({\n                  loginName: \"not login\",\n                  isLogin: 0\n                }));\n              });\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function authenticateUser(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/src/redux/actions/asyncActions/loginAction.js"],"names":["AuthenticationService","acitons2","jwt_decode","setAuthToken","authenticateUser","username","pass","console","log","dispatch","getState","loginBegan","executeJwtAuthenticationService","then","response","data","message","token","localStorage","setItem","decoded","loginSuccess","loginName","isLogin","catch","error"],"mappings":";;AAAA,OAAOA,qBAAP,MAAkC,wCAAlC;AACA,OAAO,KAAKC,QAAZ,MAA0B,4BAA1B,C,CACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AAEA,OAAO,IAAMC,gBAAgB;AAAA,sEAAG,iBAAMC,QAAN,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAC5BC,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAD4B,6CAGrB,UAASC,QAAT,EAAkBC,QAAlB,EAA2B;AAC9BD,cAAAA,QAAQ,CAACR,QAAQ,CAACU,UAAV,CAAR;AAEAX,cAAAA,qBAAqB,CAACY,+BAAtB,CAAsDP,QAAtD,EAA+DC,IAA/D,EACCO,IADD,CACM,UAAAC,QAAQ,EAAE;AAEZP,gBAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ;;AAGA,oBAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAd,KAAwB,OAA5B,EAAoC;AAElC,sBAAMC,KAAK,GAAGH,QAAQ,CAACC,IAAT,CAAcE,KAA5B;AACAV,kBAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACAC,kBAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAA+BF,KAA/B,EAJkC,CAKlC;;AACAd,kBAAAA,YAAY,CAACc,KAAD,CAAZ,CANkC,CAOlC;;AACA,sBAAMG,OAAO,GAAGlB,UAAU,CAACe,KAAD,CAA1B;AACAR,kBAAAA,QAAQ,CAACR,QAAQ,CAACoB,YAAT,CAAsB;AAACC,oBAAAA,SAAS,EAAC,OAAX;AAAmBC,oBAAAA,OAAO,EAAC;AAA3B,mBAAtB,CAAD,CAAR;AAID,iBAbD,MAcI;AACAd,kBAAAA,QAAQ,CAACR,QAAQ,CAACoB,YAAT,CAAsB;AAACC,oBAAAA,SAAS,EAAC,WAAX;AAAuBC,oBAAAA,OAAO,EAAC;AAA/B,mBAAtB,CAAD,CAAR;AAEH;AAIJ,eA3BD,EA4BCC,KA5BD,CA4BO,UAAAC,KAAK,EAAE;AACVhB,gBAAAA,QAAQ,CAACR,QAAQ,CAACoB,YAAT,CAAsB;AAACC,kBAAAA,SAAS,EAAC,WAAX;AAAuBC,kBAAAA,OAAO,EAAC;AAA/B,iBAAtB,CAAD,CAAR;AAEH,eA/BD;AAoCH,aA1C2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBnB,gBAAgB;AAAA;AAAA;AAAA,GAAtB","sourcesContent":["import AuthenticationService from '../../../service/AuthenticationService'\nimport * as acitons2 from '../../../middleware/apiGen'\n// 引入解析token方法\nimport jwt_decode from 'jwt-decode'\n// 引入设置token方法\nimport setAuthToken from '../../../components/auth/setAuthToken'\n\nexport const authenticateUser = async(username,pass)=>{\n    console.log(\"login began\")\n\n    return function(dispatch,getState){\n        dispatch(acitons2.loginBegan)\n    \n        AuthenticationService.executeJwtAuthenticationService(username,pass)\n        .then(response=>{\n\n            console.log(response);\n\n            \n            if (response.data.message===\"login\"){\n              \n              const token = response.data.token;\n              console.log(token)\n              localStorage.setItem('jwToken',token)\n              //设置axios的headers token\n              setAuthToken(token)\n              // 解析token\n              const decoded = jwt_decode(token)\n              dispatch(acitons2.loginSuccess({loginName:\"login\",isLogin:1} ))\n       \n               \n              \n            }\n            else{\n                dispatch(acitons2.loginSuccess({loginName:\"not login\",isLogin:0} ))\n            \n            }\n\n           \n            \n        })\n        .catch(error=>{\n            dispatch(acitons2.loginSuccess({loginName:\"not login\",isLogin:0} ))\n\n        })\n\n\n\n\n    }\n}"]},"metadata":{},"sourceType":"module"}
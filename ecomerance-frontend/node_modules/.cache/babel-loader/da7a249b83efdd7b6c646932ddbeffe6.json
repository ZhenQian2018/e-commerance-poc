{"ast":null,"code":"import AuthenticationService from '../../../service/AuthenticationService';\nimport * as acitons2 from '../../../middleware/apiGen'; // 引入解析token方法\n\nimport jwt_decode from 'jwt-decode'; // 引入设置token方法\n\nimport setAuthToken from '../../../components/auth/setAuthToken';\nimport { store } from \"../../../index\";\nexport function registerUser(auth, post, username, email, pass) {\n  console.log(\"register began\");\n  return function (dispatch) {\n    dispatch(acitons2.registerBegan({\n      loginName: \"not login\",\n      isLogin: 0,\n      status: \"begin\"\n    }));\n    AuthenticationService.executeRegister(auth, post, {\n      email: email,\n      password: pass,\n      username: username\n    }).then(function (response) {\n      console.log(response);\n\n      if (response.data.message === \"login\") {\n        dispatch(acitons2.registerSuccess({\n          loginName: \"not login\",\n          isLogin: 0,\n          status: \"free\"\n        }));\n      } else {\n        dispatch(acitons2.registerFailed({\n          loginName: \"not login\",\n          isLogin: 0,\n          status: \"free\"\n        }));\n      }\n    }).catch(function (error) {\n      dispatch(acitons2.registerFailed({\n        loginName: \"not login\",\n        isLogin: 0,\n        status: \"free\"\n      }));\n    });\n  };\n}\nexport function authenticateUser(auth, post, email, pass) {\n  console.log(\"login began\");\n  return function (dispatch) {\n    dispatch(acitons2.loginBegan({\n      loginName: \"login\",\n      isLogin: 0,\n      status: \"begin\"\n    }));\n    AuthenticationService.executeJwtAuthenticationService(auth, post, {\n      email: email,\n      password: pass\n    }).then(function (response) {\n      console.log(response);\n\n      if (response.data.message === \"login\") {\n        var token = response.data.token;\n        console.log(token);\n        localStorage.setItem('jwToken', token); //设置axios的headers token\n\n        setAuthToken(token); // 解析token\n\n        var decoded = jwt_decode(token);\n        dispatch(acitons2.loginSuccess({\n          loginName: \"login\",\n          isLogin: 1,\n          status: \"free\"\n        }));\n      } else {\n        dispatch(acitons2.loginFailed({\n          loginName: \"not login\",\n          isLogin: 0,\n          status: \"free\"\n        }));\n      }\n    }).catch(function (error) {\n      dispatch(acitons2.loginFailed({\n        loginName: \"not login\",\n        isLogin: 0,\n        status: \"free\"\n      }));\n    });\n  };\n} // export const authenticateUser = async(username,pass)=>{\n//     console.log(\"login began\")\n//     return function(dispatch,getState){\n//         dispatch(acitons2.loginBegan)\n//     }\n// }","map":{"version":3,"sources":["/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/src/redux/actions/asyncActions/loginAction.js"],"names":["AuthenticationService","acitons2","jwt_decode","setAuthToken","store","registerUser","auth","post","username","email","pass","console","log","dispatch","registerBegan","loginName","isLogin","status","executeRegister","password","then","response","data","message","registerSuccess","registerFailed","catch","error","authenticateUser","loginBegan","executeJwtAuthenticationService","token","localStorage","setItem","decoded","loginSuccess","loginFailed"],"mappings":"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","sourcesContent":["import AuthenticationService from '../../../service/AuthenticationService'\nimport * as acitons2 from '../../../middleware/apiGen'\n// 引入解析token方法\nimport jwt_decode from 'jwt-decode'\n// 引入设置token方法\nimport setAuthToken from '../../../components/auth/setAuthToken'\nimport {store} from \"../../../index\"\nexport function registerUser(auth,post,username,email,pass){\n    console.log(\"register began\")\n    \n    return function(dispatch) {\n        dispatch(acitons2.registerBegan({loginName:\"not login\",isLogin:0,status:\"begin\"}))\n        AuthenticationService.executeRegister(auth,post,{\n            email:email,password:pass,username:username\n        })\n        .then(response=>{\n            \n            console.log(response);\n\n            \n            if (response.data.message===\"login\"){\n              \n              \n              dispatch(acitons2.registerSuccess({loginName:\"not login\",isLogin:0,status:\"free\"} ))\n       \n               \n              \n            }\n            else{\n                dispatch(acitons2.registerFailed({loginName:\"not login\",isLogin:0,status:\"free\"}))\n            \n            }\n\n           \n            \n        })\n        .catch(error=>{\n            dispatch(acitons2.registerFailed({loginName:\"not login\",isLogin:0,status:\"free\"}))\n\n        })\n\n}}\nexport function authenticateUser(auth,post,email,pass) {\n    console.log(\"login began\")\n    \n    return function(dispatch) {\n        dispatch(acitons2.loginBegan({loginName:\"login\",isLogin:0,status:\"begin\"}))\n        AuthenticationService.executeJwtAuthenticationService(auth,post,{\n            email:email,password:pass\n        })\n        .then(response=>{\n            \n            console.log(response);\n\n            \n            if (response.data.message===\"login\"){\n              \n              const token = response.data.token;\n              console.log(token)\n              localStorage.setItem('jwToken',token)\n              //设置axios的headers token\n              setAuthToken(token)\n              // 解析token\n              const decoded = jwt_decode(token)\n              dispatch(acitons2.loginSuccess({loginName:\"login\",isLogin:1,status:\"free\"} ))\n       \n               \n              \n            }\n            else{\n                dispatch(acitons2.loginFailed({loginName:\"not login\",isLogin:0,status:\"free\"}))\n            \n            }\n\n           \n            \n        })\n        .catch(error=>{\n            dispatch(acitons2.loginFailed({loginName:\"not login\",isLogin:0,status:\"free\"}))\n\n        })\n      \n \n    }\n  }\n\n\n// export const authenticateUser = async(username,pass)=>{\n//     console.log(\"login began\")\n\n//     return function(dispatch,getState){\n//         dispatch(acitons2.loginBegan)\n    \n       \n\n\n\n\n//     }\n// }"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from 'axios';\nimport AuthenticationService from '../service/AuthenticationService';\nvar action = {\n  type: 'apiCallBegan',\n  payload: {\n    url: '/bugs',\n    method: 'get',\n    data: {},\n    onSucess: 'bugReceived',\n    onError: 'apiRequestFailed'\n  }\n};\n\nvar api = function api(_ref) {\n  var dispatch = _ref.dispatch;\n  return function (next) {\n    return function (action) {\n      if (action.type !== 'apiCallBegan') {\n        return next(action);\n      }\n\n      var _action$payload = action.payload,\n          url = _action$payload.url,\n          method = _action$payload.method,\n          data = _action$payload.data,\n          onSucess = _action$payload.onSucess,\n          onError = _action$payload.onError;\n\n      try {\n        AuthenticationService.executeJwtAuthenticationService(url, method, data).then(function (response) {\n          if (response.message === \"login\") {\n            store.dispatch({\n              type: LOGIN_SUCESS,\n              payload: {\n                loginName: \"login\",\n                isLogin: 1\n              }\n            });\n          } else {\n            store.dispatch({\n              type: LOGIN_FAILED,\n              payload: {\n                loginName: \"not login\",\n                isLogin: 0\n              }\n            });\n          }\n\n          dispatch({\n            type: onSucess,\n            payload: Response.data\n          });\n        });\n      } catch (error) {\n        dispatch({\n          type: onError,\n          payload: error\n        });\n      }\n    };\n  };\n};\n\nexport default api;","map":{"version":3,"sources":["/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/src/middleware/Api.js"],"names":["axios","AuthenticationService","action","type","payload","url","method","data","onSucess","onError","api","dispatch","next","executeJwtAuthenticationService","then","response","message","store","LOGIN_SUCESS","loginName","isLogin","LOGIN_FAILED","Response","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;AACA,IAAMC,MAAM,GAAG;AACXC,EAAAA,IAAI,EAAE,cADK;AAEXC,EAAAA,OAAO,EAAE;AACLC,IAAAA,GAAG,EAAE,OADA;AAELC,IAAAA,MAAM,EAAE,KAFH;AAGLC,IAAAA,IAAI,EAAE,EAHD;AAILC,IAAAA,QAAQ,EAAE,aAJL;AAKLC,IAAAA,OAAO,EAAE;AALJ;AAFE,CAAf;;AAYA,IAAMC,GAAG,GAAG,SAANA,GAAM;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SAAkB,UAAAC,IAAI;AAAA,WAAI,UAAAV,MAAM,EAAI;AAC5C,UAAIA,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC;AAChC,eAAOS,IAAI,CAACV,MAAD,CAAX;AACH;;AAH2C,4BAKKA,MAAM,CAACE,OALZ;AAAA,UAKpCC,GALoC,mBAKpCA,GALoC;AAAA,UAK/BC,MAL+B,mBAK/BA,MAL+B;AAAA,UAKvBC,IALuB,mBAKvBA,IALuB;AAAA,UAKjBC,QALiB,mBAKjBA,QALiB;AAAA,UAKPC,OALO,mBAKPA,OALO;;AAM5C,UAAI;AACAR,QAAAA,qBAAqB,CAACY,+BAAtB,CAAsDR,GAAtD,EAA0DC,MAA1D,EAAiEC,IAAjE,EACCO,IADD,CACM,UAACC,QAAD,EACH;AACD,cAAIA,QAAQ,CAACC,OAAT,KAAmB,OAAvB,EAA+B;AAC7BC,YAAAA,KAAK,CAACN,QAAN,CAAe;AACbR,cAAAA,IAAI,EAAEe,YADO;AAEbd,cAAAA,OAAO,EAAE;AAAEe,gBAAAA,SAAS,EAAC,OAAZ;AAAoBC,gBAAAA,OAAO,EAAC;AAA5B;AAFI,aAAf;AAID,WALD,MAMI;AAEFH,YAAAA,KAAK,CAACN,QAAN,CAAe;AACbR,cAAAA,IAAI,EAAEkB,YADO;AAEbjB,cAAAA,OAAO,EAAE;AAAEe,gBAAAA,SAAS,EAAC,WAAZ;AAAwBC,gBAAAA,OAAO,EAAC;AAAhC;AAFI,aAAf;AAID;;AACHT,UAAAA,QAAQ,CAAC;AAAER,YAAAA,IAAI,EAAEK,QAAR;AAAkBJ,YAAAA,OAAO,EAAEkB,QAAQ,CAACf;AAApC,WAAD,CAAR;AACH,SAjBG;AAkBH,OAnBD,CAoBA,OAAOgB,KAAP,EAAc;AACVZ,QAAAA,QAAQ,CAAC;AAAER,UAAAA,IAAI,EAAEM,OAAR;AAAiBL,UAAAA,OAAO,EAAEmB;AAA1B,SAAD,CAAR;AAEH;AAEJ,KA/BiC;AAAA,GAAtB;AAAA,CAAZ;;AAoCA,eAAeb,GAAf","sourcesContent":["import axios from 'axios';\nimport AuthenticationService from '../service/AuthenticationService'\nconst action = {\n    type: 'apiCallBegan',\n    payload: {\n        url: '/bugs',\n        method: 'get',\n        data: {},\n        onSucess: 'bugReceived',\n        onError: 'apiRequestFailed'\n    }\n\n}\n\nconst api = ({ dispatch }) => next => action => {\n    if (action.type !== 'apiCallBegan') {\n        return next(action);\n    }\n\n    const { url, method, data, onSucess, onError } = action.payload;\n    try {\n        AuthenticationService.executeJwtAuthenticationService(url,method,data)\n        .then((response\n        )=>{\n          if (response.message===\"login\"){\n            store.dispatch({\n              type: LOGIN_SUCESS,\n              payload: { loginName:\"login\",isLogin:1}\n            });\n          }\n          else{\n    \n            store.dispatch({\n              type: LOGIN_FAILED,\n              payload: { loginName:\"not login\",isLogin:0}\n            });\n          }\n        dispatch({ type: onSucess, payload: Response.data })\n    })\n    }\n    catch (error) {\n        dispatch({ type: onError, payload: error })\n\n    }\n\n}\n\n\n\n    ;\nexport default api;"]},"metadata":{},"sourceType":"module"}
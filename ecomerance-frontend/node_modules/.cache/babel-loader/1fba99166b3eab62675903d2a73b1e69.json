{"ast":null,"code":"var _this = this;\n\nimport axios from 'axios';\nimport AuthenticationService from '../service/AuthenticationService';\nimport { LOGIN_SUCESS, LOGIN_FAILED } from '../redux/actions/loginActions';\nimport * as actions from './apiGen';\nimport { push } from 'react-router-redux';\nimport { withRouter } from \"react-router-dom\";\n\nvar api = function api(_ref) {\n  var dispatch = _ref.dispatch;\n  return function (next) {\n    return function (action) {\n      if (action.type !== actions.loginBegan.type) {\n        return next(action);\n      }\n\n      console.log(actions.loginBegan.type);\n      var _action$payload = action.payload,\n          url = _action$payload.url,\n          method = _action$payload.method,\n          data = _action$payload.data,\n          onSucess = _action$payload.onSucess,\n          onError = _action$payload.onError;\n      console.log(action.payload);\n\n      try {\n        AuthenticationService.executeJwtAuthenticationService(url, method, data).then(function (response) {\n          console.log(response);\n\n          if (response.data.message === \"login\") {\n            var history = useHistory();\n\n            _this.props.push('./');\n\n            if (onSucess) {\n              dispatch({\n                type: actions.loginSuccess.type,\n                payload: {\n                  loginName: \"login\",\n                  isLogin: 1\n                }\n              });\n            } else {\n              dispatch(actions.loginSuccess({\n                payload: {\n                  loginName: \"login\",\n                  isLogin: 1\n                }\n              }));\n            }\n          } else {\n            dispatch({\n              type: actions.loginFailed.type,\n              payload: {\n                loginName: \"not login\",\n                isLogin: 0\n              }\n            });\n          } //dispatch({ type: onSucess, payload: Response.data })\n\n        });\n      } catch (error) {\n        //genreal\n        dispatch(actions.loginFailed(error)); //\n\n        if (onError) {\n          dispatch({\n            type: onError,\n            payload: error\n          });\n        }\n      }\n    };\n  };\n};\n\nexport default withRouter(api);","map":{"version":3,"sources":["/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/src/middleware/Api.js"],"names":["axios","AuthenticationService","LOGIN_SUCESS","LOGIN_FAILED","actions","push","withRouter","api","dispatch","next","action","type","loginBegan","console","log","payload","url","method","data","onSucess","onError","executeJwtAuthenticationService","then","response","message","history","useHistory","props","loginSuccess","loginName","isLogin","loginFailed","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;AACA,SAAQC,YAAR,EAAqBC,YAArB,QAAwC,+BAAxC;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AACA,IAAMC,GAAG,GAAG,SAANA,GAAM;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SAAkB,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AAC5C,UAAIA,MAAM,CAACC,IAAP,KAAgBP,OAAO,CAACQ,UAAR,CAAmBD,IAAvC,EAA8C;AAC1C,eAAOF,IAAI,CAACC,MAAD,CAAX;AACH;;AACDG,MAAAA,OAAO,CAACC,GAAR,CAAYV,OAAO,CAACQ,UAAR,CAAmBD,IAA/B;AAJ4C,4BAKMD,MAAM,CAACK,OALb;AAAA,UAKpCC,GALoC,mBAKpCA,GALoC;AAAA,UAK/BC,MAL+B,mBAK/BA,MAL+B;AAAA,UAKvBC,IALuB,mBAKvBA,IALuB;AAAA,UAKhBC,QALgB,mBAKhBA,QALgB;AAAA,UAKNC,OALM,mBAKNA,OALM;AAM5CP,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,OAAnB;;AACA,UAAI;AACAd,QAAAA,qBAAqB,CAACoB,+BAAtB,CAAsDL,GAAtD,EAA0DC,MAA1D,EAAiEC,IAAjE,EACCI,IADD,CACM,UAACC,QAAD,EAEH;AACCV,UAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;;AAGF,cAAIA,QAAQ,CAACL,IAAT,CAAcM,OAAd,KAAwB,OAA5B,EAAoC;AAClC,gBAAMC,OAAO,GAAGC,UAAU,EAA1B;;AACA,YAAA,KAAI,CAACC,KAAL,CAAWtB,IAAX,CAAgB,IAAhB;;AACE,gBAAGc,QAAH,EAAY;AACVX,cAAAA,QAAQ,CAAC;AACLG,gBAAAA,IAAI,EAAEP,OAAO,CAACwB,YAAR,CAAqBjB,IADtB;AAELI,gBAAAA,OAAO,EAAE;AAAEc,kBAAAA,SAAS,EAAC,OAAZ;AAAoBC,kBAAAA,OAAO,EAAC;AAA5B;AAFJ,eAAD,CAAR;AAID,aALD,MAMI;AACFtB,cAAAA,QAAQ,CAACJ,OAAO,CAACwB,YAAR,CAAqB;AAACb,gBAAAA,OAAO,EAAE;AAAEc,kBAAAA,SAAS,EAAC,OAAZ;AAAoBC,kBAAAA,OAAO,EAAC;AAA5B;AAAV,eAArB,CAAD,CAAR;AACD;AAEJ,WAbD,MAcI;AAEFtB,YAAAA,QAAQ,CAAC;AACPG,cAAAA,IAAI,EAAEP,OAAO,CAAC2B,WAAR,CAAoBpB,IADnB;AAEPI,cAAAA,OAAO,EAAE;AAAEc,gBAAAA,SAAS,EAAC,WAAZ;AAAwBC,gBAAAA,OAAO,EAAC;AAAhC;AAFF,aAAD,CAAR;AAID,WAxBA,CAyBH;;AACH,SA7BG;AA8BH,OA/BD,CAgCA,OAAOE,KAAP,EAAc;AACV;AACAxB,QAAAA,QAAQ,CAACJ,OAAO,CAAC2B,WAAR,CAAoBC,KAApB,CAAD,CAAR,CAFU,CAIV;;AACA,YAAGZ,OAAH,EAAW;AAACZ,UAAAA,QAAQ,CAAC;AAAEG,YAAAA,IAAI,EAAES,OAAR;AAAiBL,YAAAA,OAAO,EAAEiB;AAA1B,WAAD,CAAR;AAA4C;AAG3D;AAEJ,KAjDiC;AAAA,GAAtB;AAAA,CAAZ;;AAsDA,eAAe1B,UAAU,CAACC,GAAD,CAAzB","sourcesContent":["import axios from 'axios';\nimport AuthenticationService from '../service/AuthenticationService'\nimport {LOGIN_SUCESS,LOGIN_FAILED} from '../redux/actions/loginActions'\nimport * as actions from './apiGen';\nimport { push } from 'react-router-redux'\nimport { withRouter } from \"react-router-dom\";\nconst api = ({ dispatch }) => next => action => {\n    if (action.type !== actions.loginBegan.type ) {\n        return next(action);\n    }\n    console.log(actions.loginBegan.type);\n    const { url, method, data , onSucess, onError } = action.payload;\n    console.log(action.payload);\n    try {\n        AuthenticationService.executeJwtAuthenticationService(url,method,data)\n        .then((response\n\n        )=>{\n            console.log(response);\n\n            \n          if (response.data.message===\"login\"){\n            const history = useHistory()\n            this.props.push('./')\n              if(onSucess){\n                dispatch({\n                    type: actions.loginSuccess.type,\n                    payload: { loginName:\"login\",isLogin:1}\n                  });\n              }\n              else{\n                dispatch(actions.loginSuccess({payload: { loginName:\"login\",isLogin:1}}))\n              }\n            \n          }\n          else{\n    \n            dispatch({\n              type: actions.loginFailed.type,\n              payload: { loginName:\"not login\",isLogin:0}\n            });\n          }\n        //dispatch({ type: onSucess, payload: Response.data })\n    })\n    }\n    catch (error) {\n        //genreal\n        dispatch(actions.loginFailed(error))\n\n        //\n        if(onError){dispatch({ type: onError, payload: error })}\n        \n\n    }\n\n}\n\n\n\n    ;\nexport default withRouter(api);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import AuthenticationService from '../../../service/AuthenticationService';\nimport * as acitons2 from '../../../middleware/apiGen';\n\nvar authenticateUser = function authenticateUser(username, pass) {\n  return function (dispatch) {\n    dispatch(acitons2.loginBegan);\n    AuthenticationService.executeJwtAuthenticationService(username, pass).then(function (Response) {\n      console.log(response);\n\n      if (response.data.message === \"login\") {\n        var token = response.data.token;\n        console.log(token);\n        localStorage.setItem('jwToken', token); //设置axios的headers token\n\n        setAuthToken(token); // 解析token\n\n        var decoded = jwt_decode(token);\n        dispatch(acitons2.loginSuccess({\n          loginName: \"login\",\n          isLogin: 1\n        }));\n      } else {\n        dispatch(acitons2.loginSuccess({\n          loginName: \"not login\",\n          isLogin: 0\n        }));\n      }\n    }).catch(function (error) {\n      dispatch(acitons2.loginSuccess({\n        loginName: \"not login\",\n        isLogin: 0\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/src/redux/actions/asyncActions/loginAction.js"],"names":["AuthenticationService","acitons2","authenticateUser","username","pass","dispatch","loginBegan","executeJwtAuthenticationService","then","Response","console","log","response","data","message","token","localStorage","setItem","setAuthToken","decoded","jwt_decode","loginSuccess","loginName","isLogin","catch","error"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,wCAAlC;AACA,OAAO,KAAKC,QAAZ,MAA0B,4BAA1B;;AAGA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD,EAAUC,IAAV,EAAiB;AAEtC,SAAO,UAASC,QAAT,EAAkB;AACrBA,IAAAA,QAAQ,CAACJ,QAAQ,CAACK,UAAV,CAAR;AAEAN,IAAAA,qBAAqB,CAACO,+BAAtB,CAAsDJ,QAAtD,EAA+DC,IAA/D,EACCI,IADD,CACM,UAAAC,QAAQ,EAAE;AAEZC,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;;AAGA,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAd,KAAwB,OAA5B,EAAoC;AAElC,YAAMC,KAAK,GAAGH,QAAQ,CAACC,IAAT,CAAcE,KAA5B;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAA+BF,KAA/B,EAJkC,CAKlC;;AACAG,QAAAA,YAAY,CAACH,KAAD,CAAZ,CANkC,CAOlC;;AACA,YAAMI,OAAO,GAAGC,UAAU,CAACL,KAAD,CAA1B;AACAV,QAAAA,QAAQ,CAACJ,QAAQ,CAACoB,YAAT,CAAsB;AAACC,UAAAA,SAAS,EAAC,OAAX;AAAmBC,UAAAA,OAAO,EAAC;AAA3B,SAAtB,CAAD,CAAR;AAID,OAbD,MAcI;AACAlB,QAAAA,QAAQ,CAACJ,QAAQ,CAACoB,YAAT,CAAsB;AAACC,UAAAA,SAAS,EAAC,WAAX;AAAuBC,UAAAA,OAAO,EAAC;AAA/B,SAAtB,CAAD,CAAR;AAEH;AAIJ,KA3BD,EA4BCC,KA5BD,CA4BO,UAAAC,KAAK,EAAE;AACVpB,MAAAA,QAAQ,CAACJ,QAAQ,CAACoB,YAAT,CAAsB;AAACC,QAAAA,SAAS,EAAC,WAAX;AAAuBC,QAAAA,OAAO,EAAC;AAA/B,OAAtB,CAAD,CAAR;AAEH,KA/BD;AAoCH,GAvCD;AAwCH,CA1CD","sourcesContent":["import AuthenticationService from '../../../service/AuthenticationService'\nimport * as acitons2 from '../../../middleware/apiGen'\n\n\nconst authenticateUser = (username,pass)=>{\n\n    return function(dispatch){\n        dispatch(acitons2.loginBegan)\n    \n        AuthenticationService.executeJwtAuthenticationService(username,pass)\n        .then(Response=>{\n\n            console.log(response);\n\n            \n            if (response.data.message===\"login\"){\n              \n              const token = response.data.token;\n              console.log(token)\n              localStorage.setItem('jwToken',token)\n              //设置axios的headers token\n              setAuthToken(token)\n              // 解析token\n              const decoded = jwt_decode(token)\n              dispatch(acitons2.loginSuccess({loginName:\"login\",isLogin:1} ))\n       \n               \n              \n            }\n            else{\n                dispatch(acitons2.loginSuccess({loginName:\"not login\",isLogin:0} ))\n            \n            }\n\n           \n            \n        })\n        .catch(error=>{\n            dispatch(acitons2.loginSuccess({loginName:\"not login\",isLogin:0} ))\n\n        })\n\n\n\n\n    }\n}"]},"metadata":{},"sourceType":"module"}
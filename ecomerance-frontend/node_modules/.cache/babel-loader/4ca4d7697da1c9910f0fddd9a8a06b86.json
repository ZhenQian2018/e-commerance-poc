{"ast":null,"code":"import AuthenticationService from '../../../service/AuthenticationService';\nimport * as acitons2 from '../../../middleware/apiGen'; // 引入解析token方法\n\nimport jwt_decode from 'jwt-decode'; // 引入设置token方法\n\nimport setAuthToken from '../../../components/auth/setAuthToken';\nexport function authenticateUser(username, pass) {\n  console.log(\"login began\");\n  return function (dispatch) {\n    dispatch(acitons2.loginBegan);\n    AuthenticationService.executeJwtAuthenticationService(username, pass).then(function (response) {\n      console.log(response);\n\n      if (response.data.message === \"login\") {\n        var token = response.data.token;\n        console.log(token);\n        localStorage.setItem('jwToken', token); //设置axios的headers token\n\n        setAuthToken(token); // 解析token\n\n        var decoded = jwt_decode(token);\n        dispatch(acitons2.loginSuccess({\n          loginName: \"login\",\n          isLogin: 1\n        }));\n      } else {\n        dispatch(acitons2.loginSuccess({\n          loginName: \"not login\",\n          isLogin: 0\n        }));\n      }\n    }).catch(function (error) {\n      dispatch(acitons2.loginSuccess({\n        loginName: \"not login\",\n        isLogin: 0\n      }));\n    }); // fetch(\"https://ron-swanson-quotes.herokuapp.com/v2/quotes\")\n    //   .then(response => response.json())\n    //   .then(data => dispatch({\n    //       type: QUOTE_RECEIVED,\n    //       payload: data\n    //     }))\n    //   .catch(error => dispatch({\n    //       type: QUOTE_FAILED,\n    //       payload: error\n    //     })\n    //   );\n  };\n} // export const authenticateUser = async(username,pass)=>{\n//     console.log(\"login began\")\n//     return function(dispatch,getState){\n//         dispatch(acitons2.loginBegan)\n//     }\n// }","map":{"version":3,"sources":["/Users/zhen/Documents/marlabs/E-Commerce-sample/flone/src/redux/actions/asyncActions/loginAction.js"],"names":["AuthenticationService","acitons2","jwt_decode","setAuthToken","authenticateUser","username","pass","console","log","dispatch","loginBegan","executeJwtAuthenticationService","then","response","data","message","token","localStorage","setItem","decoded","loginSuccess","loginName","isLogin","catch","error"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,wCAAlC;AACA,OAAO,KAAKC,QAAZ,MAA0B,4BAA1B,C,CACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AAEA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAmCC,IAAnC,EAAyC;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,SAAO,UAASC,QAAT,EAAmB;AACtBA,IAAAA,QAAQ,CAACR,QAAQ,CAACS,UAAV,CAAR;AACAV,IAAAA,qBAAqB,CAACW,+BAAtB,CAAsDN,QAAtD,EAA+DC,IAA/D,EACCM,IADD,CACM,UAAAC,QAAQ,EAAE;AAEZN,MAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;;AAGA,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAd,KAAwB,OAA5B,EAAoC;AAElC,YAAMC,KAAK,GAAGH,QAAQ,CAACC,IAAT,CAAcE,KAA5B;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAA+BF,KAA/B,EAJkC,CAKlC;;AACAb,QAAAA,YAAY,CAACa,KAAD,CAAZ,CANkC,CAOlC;;AACA,YAAMG,OAAO,GAAGjB,UAAU,CAACc,KAAD,CAA1B;AACAP,QAAAA,QAAQ,CAACR,QAAQ,CAACmB,YAAT,CAAsB;AAACC,UAAAA,SAAS,EAAC,OAAX;AAAmBC,UAAAA,OAAO,EAAC;AAA3B,SAAtB,CAAD,CAAR;AAID,OAbD,MAcI;AACAb,QAAAA,QAAQ,CAACR,QAAQ,CAACmB,YAAT,CAAsB;AAACC,UAAAA,SAAS,EAAC,WAAX;AAAuBC,UAAAA,OAAO,EAAC;AAA/B,SAAtB,CAAD,CAAR;AAEH;AAIJ,KA3BD,EA4BCC,KA5BD,CA4BO,UAAAC,KAAK,EAAE;AACVf,MAAAA,QAAQ,CAACR,QAAQ,CAACmB,YAAT,CAAsB;AAACC,QAAAA,SAAS,EAAC,WAAX;AAAuBC,QAAAA,OAAO,EAAC;AAA/B,OAAtB,CAAD,CAAR;AAEH,KA/BD,EAFsB,CAmC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,GA9CD;AA+CD,C,CAGH;AACA;AAEA;AACA;AAOA;AACA","sourcesContent":["import AuthenticationService from '../../../service/AuthenticationService'\nimport * as acitons2 from '../../../middleware/apiGen'\n// 引入解析token方法\nimport jwt_decode from 'jwt-decode'\n// 引入设置token方法\nimport setAuthToken from '../../../components/auth/setAuthToken'\n\nexport function authenticateUser(username,pass) {\n    console.log(\"login began\")\n    return function(dispatch) {\n        dispatch(acitons2.loginBegan)\n        AuthenticationService.executeJwtAuthenticationService(username,pass)\n        .then(response=>{\n\n            console.log(response);\n\n            \n            if (response.data.message===\"login\"){\n              \n              const token = response.data.token;\n              console.log(token)\n              localStorage.setItem('jwToken',token)\n              //设置axios的headers token\n              setAuthToken(token)\n              // 解析token\n              const decoded = jwt_decode(token)\n              dispatch(acitons2.loginSuccess({loginName:\"login\",isLogin:1} ))\n       \n               \n              \n            }\n            else{\n                dispatch(acitons2.loginSuccess({loginName:\"not login\",isLogin:0} ))\n            \n            }\n\n           \n            \n        })\n        .catch(error=>{\n            dispatch(acitons2.loginSuccess({loginName:\"not login\",isLogin:0} ))\n\n        })\n      \n    // fetch(\"https://ron-swanson-quotes.herokuapp.com/v2/quotes\")\n    //   .then(response => response.json())\n    //   .then(data => dispatch({\n    //       type: QUOTE_RECEIVED,\n    //       payload: data\n    //     }))\n    //   .catch(error => dispatch({\n    //       type: QUOTE_FAILED,\n    //       payload: error\n    //     })\n    //   );\n    }\n  }\n\n\n// export const authenticateUser = async(username,pass)=>{\n//     console.log(\"login began\")\n\n//     return function(dispatch,getState){\n//         dispatch(acitons2.loginBegan)\n    \n       \n\n\n\n\n//     }\n// }"]},"metadata":{},"sourceType":"module"}